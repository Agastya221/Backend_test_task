// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  add_stock
  remove_stock
}

model Product {
  id            Int             @id @default(autoincrement())
  plu           String          @unique // Product SKU (PLU)
  name          String 
  Inventory     Inventory[] 
  ProductAction ProductAction[] 

  @@index([name]) // Indexing for product name to optimize filtering
}

model Store {
  id            Int             @id @default(autoincrement())
  name          String 
  location      String 
  Inventory     Inventory[] 
  ProductAction ProductAction[]

  @@index([id])
}

model Inventory {
  id              Int @id @default(autoincrement()) 
  productId       Int
  storeId         Int
  quantityOnShelf Int 
  quantityInOrder Int 

  product Product @relation(fields: [productId], references: [id]) 
  store   Store   @relation(fields: [storeId], references: [id]) 

  @@index([storeId, productId]) // Composite index for store and product
  @@index([quantityOnShelf]) // Index for quantity on shelf
  @@index([quantityInOrder]) // Index for quantity in order
}

model ProductAction {
  id              Int        @id @default(autoincrement())
  productId       Int
  storeId         Int
  
  action          ActionType 
  quantityChanged Int 
  timestamp       DateTime   @default(now())

  product Product @relation(fields: [productId], references: [id]) 
  store   Store   @relation(fields: [storeId], references: [id]) 

  @@index([storeId, productId]) 
  @@index([timestamp])
  @@index([action]) 
}
